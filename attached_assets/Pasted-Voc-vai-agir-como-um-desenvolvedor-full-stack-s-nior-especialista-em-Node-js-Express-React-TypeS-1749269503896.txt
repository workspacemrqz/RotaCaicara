Você vai agir como um desenvolvedor full-stack sênior especialista em Node.js, Express, React, TypeScript, React Query, React Hook Form, Zod, Next.js e Framer Motion. Você recebeu o repositório EcoTrackSolution completo e precisa aplicar todas as correções, ajustes e melhorias detalhadas abaixo. Antes de qualquer linha de código, analise cada arquivo, cada import, cada configuração, cada caractere, cada comentário e cada instrução. Leia todo o código com atenção e não presuma nada sem verificar o conteúdo existente. Em seguida, aplique as alterações solicitadas e entregue somente os diffs de código para cada arquivo modificado, incluindo as linhas de import necessárias, e com comentários sucintos de no máximo duas linhas explicando cada mudança. Após aplicar cada diff, valide manualmente os fluxos corrigidos no app para garantir o comportamento esperado antes de prosseguir com a próxima alteração. Abaixo estão as necessidades específicas:

1. Correção do problema de exclusão de negócio no painel Administrativo
   No backend, em server/index.ts e server/routes.ts, verifique se o middleware de body parsing está posicionado corretamente. Garanta que logo após const app = express() seja chamado app.use(express.json()). Verifique também o middleware de CORS. Em server/routes.ts crie ou ajuste a rota DELETE /api/businesses/\:id para chamar await storage.deleteBusiness(id) dentro de um bloco try/catch. No sucesso, retorne res.status(204).end() sem chamar res.json(). No catch, retorne res.status(500).json({ error: err.message }). No frontend, em client/src/pages/admin.tsx, altere o handler do ícone de lixeira para usar useMutation com mutationFn: () => apiRequest(DELETE, `/api/businesses/${id}`). No onSuccess, trate status 204 sem corpo, chame queryClient.invalidateQueries('businesses') e exiba toast de confirmação. No onError, capture error.message e exiba toast sem fechar modal ou recarregar a página.

2. Correção do fluxo de edição de negócio
   Garanta que o schema Zod em shared/schema.ts cubra todos os campos editáveis: name, description, telephone, whatsapp, address, category, destaque, ativo, imageUrl. Use esse schema no useForm via zodResolver. Em client/src/lib/queryClient.ts ajuste apiRequest para verificar if (res.status === 204) return null antes de return await res.json(), para permitir DELETE sem falhar. Em client/src/pages/admin.tsx defina a mutation updateBusiness como useMutation(async ({ id, payload }) => await apiRequest(PATCH, `/api/businesses/${id}`, payload)). Em onSuccess, invalide queries('businesses'), chame reset() e closeModal(). Em onError, exiba toast mas não altere estados. Refatore handleBusinessSubmit para primeiro await trigger() para validação Zod, depois await updateBusiness.mutateAsync({ id, payload: data }), só então reset() e closeModal(). Certifique-se de que após editar, os negócios não desapareçam da listagem.

3. Implementação da listagem de categorias na Home
   Crie ou ajuste pages/categories/\[slug].tsx em Next.js. Em getStaticPaths faça fetch de todas as categorias via API GET /api/categories, gere paths com params.slug e fallback: blocking. Em getStaticProps faça fetch de GET /api/categories/\${slug}/businesses. Se res.status === 404, retorne notFound: true. Caso contrário, retorne props: { list: await res.json() }. No componente, use props.list para renderizar cards. Opcionalmente, se usar useQuery, defina queryKey: \['categories', slug] e queryFn para buscar via apiRequest. Adicione estados de loading, error e empty.

4. Criação e ajuste de Configurações do Site no Admin
   Em client/src/pages/admin/settings.tsx, reorganize a página em três abas: Geral, Home, Anuncie Sua Empresa. Use componentes de Tabs ou outro sistema para alternar entre abas. Em cada aba, exiba os campos pertinentes (no Geral: logo, nome do site, descrição, contato, cor principal; na Home: texto de boas-vindas, banners, destaques; no Anuncie Sua Empresa: configurações específicas dessa seção). Em cada aba, inclua botão Salvar que dispara useMutation para PATCH nos endpoints correspondentes. No backend, em server/routes.ts, implemente as rotas PATCH /api/settings/general, /api/settings/home e /api/settings/announce. Cada rota deve chamar storage.updateSettings(section, req.body) e retornar res.status(200).json(updatedSettings).

5. Remoção da aba Conteúdo do painel e da página associada
   Em client/src/components/Sidebar.tsx, remova importações, NavLink ou menu item referente a Conteúdo. Verifique também qualquer rota ou link em code references. Em pages/admin/content.tsx ou projeto equivalente, renomeie ou remova o arquivo, desabilitando a rota. Garanta que não existam referências quebradas.

6. Substituição de transições simples por animações avançadas com Framer Motion
   Em client/src/pages/advertise.tsx e client/src/pages/index.tsx ou home.tsx, localize seções de cards ou formulários. Substitua wrappers div por motion.div, configure initial, animate e exit props, e defina variants para animações de fade, slide ou scale conforme necessário. Adicione delay e stagggerChildren para um efeito mais atrativo e consistente.

7. Ajuste completo do formulário Anuncie Sua Empresa
   No backend, server/routes.ts, crie rota POST /api/submissions que faz await storage.createSubmission(req.body) e retorne res.status(201).json(submission). No frontend, client/src/pages/advertise.tsx ou equivalent, ajuste o onSubmit do form para usar apiRequest(POST, '/api/submissions', data). Em caso de sucesso (status 201), exiba modal de agradecimento com mensagem de confirmação. Em caso de erro, capture error.message e exiba toast.

8. Implementação completa da aba Cadastros no Admin
   Em client/src/pages/admin/submissions.tsx, use useQuery('submissions', () => apiRequest(GET, '/api/admin/submissions')) para buscar lista de cadastros. Renderize cada cadastro em uma lista ou tabela, exibindo nome, data, status. Para cada item, adicione botões Ver, Editar, Publicar e Excluir. Configure cada action como useMutation apropriado: GET para buscar detalhe, PUT/PATCH para editar, POST ou PATCH para publicar, DELETE para excluir. Cadastros com status diferente de approved devem exibir badge Pendente.

9. Botão Ir para Cadastros no Dashboard
   Em client/src/pages/admin/dashboard.tsx, na seção Cadastros Pendentes, adicione um botão com onClick que usa router.push('/admin/submissions') redirecionando à aba de cadastros.

10. Remoção da frase Gerencie todos os aspectos da plataforma Rota Caiçara
    Localize no código fonte a string completa e delete-a de onde estiver no header, sidebar ou em qualquer componente.

11. Inserção de animações globais em trechos estratégicos
    Em home.tsx ou index.tsx, adicione motion.div em seções hero e de destaques. Em banners, use motion variants para animações de entrada.

12. Personalização do rodapé
    Em client/src/components/Footer.tsx, ajuste o wrapper dos ícones sociais para ter background #F5F5F5 e defina color #005F71 nos ícones. Ajuste CSS ou className conforme sua biblioteca de estilos.

13. Implementação de logo dinâmico
    Em settings.tsx, após upload de logo, receba a URL retornada pelo backend e atualize um React Context LogoContext ou global state. Em Header.tsx e Footer.tsx consuma esse contexto ou state para exibir o logo atualizado sem reload completo da página.

14. Remoção do bloco CERTIFICADO DE ANUNCIANTE VERDE
    No frontend e no admin, identifique o bloco de texto e iconografia sobre CERTIFICADO DE ANUNCIANTE VERDE e remova completamente o trecho, garantindo que o layout se adapte sem espaços vazios.

15. Exibição de imagens em destaque na Home
    Em pages/index.tsx, na seção Empresas em Destaque, altere os cards para incluírem <img src={b.imageUrl} alt={b.name} className="w-full h-48 object-cover rounded" /> antes do título. Certifique-se de que featuredBusinesses inclua imageUrl vindo do backend e que getStaticProps ou useQuery traga esse campo.

16. Garantia de consistência de cache e invalidação
    Em todas as useMutation, configure onSuccess para invalidar queries relacionadas (businesses, submissions, settings) usando queryClient.invalidateQueries com as chaves corretas.

17. Documentação dos diffs e validação
    Após cada alteração, gere um diff mostrando o trecho original e o trecho alterado. Inclua comentário sucinto de até duas linhas explicando a razão da mudança. Teste manualmente cada fluxo para confirmar o resultado. Não envie arquivos completos, envie somente diffs.

Siga rigorosamente cada instrução, valide manualmente tudo e retorne apenas os diffs de código e comentários explicativos. Sem textos adicionais, sem arquivos completos, sem links. Apenas os diffs necessários e comprovadamente funcionais após testes reais.
