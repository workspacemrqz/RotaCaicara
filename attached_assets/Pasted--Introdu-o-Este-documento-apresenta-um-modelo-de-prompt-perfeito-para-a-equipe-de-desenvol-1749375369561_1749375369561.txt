## Introdução

Este documento apresenta um modelo de **prompt perfeito** para a equipe de desenvolvimento implementar corretamente todos os ajustes na aba **Config. Site** do painel administrativo, conforme solicitado. O objetivo é detalhar passo a passo como cada campo deve funcionar, quais técnicas e padrões de código devem ser adotados e fornecer exemplos práticos de trechos de código JavaScript/TypeScript. Ao final, o prompt resultante terá aproximadamente 2.000 palavras e servirá como guia unificado para garantir que qualquer desenvolvedor possa compreender, implementar e testar as correções sem ambiguidades.

## Objetivo do Prompt

* Centralizar todas as informações necessárias em um único texto.
* Descrever claramente onde estão cada elemento HTML (inputs, botões, imagens).
* Explicar a lógica de funcionamento esperada para cada campo.
* Fornecer exemplos de código e padrões de nomenclatura e arquitetura.
* Garantir que todas as alterações só aconteçam após o clique em **Confirmar** (ID: `confirm-update-btn`).

## Estrutura Recomendada do Prompt

1. **Contextualização Inicial** – apresentar o cenário e a importância de cada correção.
2. **Descrição dos Campos** – para cada campo listado, detalhar:

   * Localização no DOM (ID e markup).
   * Comportamento atual versus comportamento esperado.
   * Lógica de atualização (event listener, gerenciamento de estado, chamada API).
   * Exemplos de código para `fetch`, `update`, `setProperty` no CSS.
3. **Buffer de Alterações e Botão Confirmar** – implementar pattern de staging: coletar alterações e só aplicar ao `click`.
4. **Feedback Visual e Acessibilidade** – adicionar loading, mensagens de sucesso/erro e atributos `aria`.
5. **Exemplos de Testes** – sugerir testes unitários e de integração para validar cada fluxo.
6. **Checklist Final** – lista de verificação para QA antes do merge.

---

## 1. Contextualização Inicial

No painel administrativo (`/admin` → **Painel Administrativo** → **Config. Site**), os campos atualmente não persistem ou aplicam as alterações corretamente. Além disso, o componente de imagem trata links em vez de uploads. É essencial que a experiência do usuário seja consistente: ele deve poder editar o nome, a descrição, cores, logos e links, e visualizar imediatamente o resultado apenas após confirmar. Essa abordagem evita atualizações parciais, inconsistências visuais e garante a integridade dos dados.

### Importância das Correções

* **Coesão visual e branding**: updates imediatos promovem coesão, mas sem confirmação podem gerar commits involuntários.
* **Consistência de dados**: manter staging até confirmação previne estados mistos.
* **Fluxo de upload**: trocar URL input por upload real melhora segurança e UX.
* **Manutenção futura**: código padronizado facilita adições de novos campos.

---

## 2. Descrição Detalhada dos Campos

### 2.1 Título do Site

* **Markup**:

  ```html
  <label for="site-title">Título do Site</label>
  <input type="text" id="site-title" name="siteTitle" />
  <h1 id="site-logo-title">Rota Caiçara</h1>
  ```

* **Problema Atual**: alterações em `#site-title` não refletem em `#site-logo-title` após confirmar.

* **Comportamento Esperado**:

  1. O usuário altera o texto no input.
  2. Ao clicar em `#confirm-update-btn`, um listener deve ler o valor de `document.getElementById('site-title').value`.
  3. Atualizar `innerText` de `document.getElementById('site-logo-title')` com o valor.
  4. Enviar via API (`PUT /api/settings`) o novo `siteName`.

* **Exemplo de código**:

  ```js
  document.getElementById('confirm-update-btn').addEventListener('click', async () => {
    const newTitle = document.getElementById('site-title').value;
    document.getElementById('site-logo-title').innerText = newTitle;
    await fetch('/api/settings', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ siteName: newTitle })
    });
  });
  ```

### 2.2 Descrição do Site

* **Markup**:

  ```html
  <label for="site-description">Descrição do Site</label>
  <textarea id="site-description" name="siteDescription"></textarea>
  <p id="site-description-text">Bem-vindo!</p>
  ```

* **Comportamento Esperado**:

  * Após confirmação, ler `#site-description` e aplicar em `#site-description-text.innerText`.
  * Incluir a chave `siteDescription` no payload JSON.

* **Exemplo**:

  ```js
  const descInput = document.getElementById('site-description').value;
  document.getElementById('site-description-text').innerText = descInput;
  ```

### 2.3 e 2.4 Logotipos do Site e do Rodapé

* **Markup**:

  ```html
  <label for="site-logo">Logotipo do Site</label>
  <input type="file" id="site-logo" accept="image/*" />
  <img id="header-logo-img" src="/default-logo.png" alt="Logo do site" />

  <label for="footer-logo">Logotipo do Rodapé</label>
  <input type="file" id="footer-logo" accept="image/*" />
  <img id="footer-logo-img" src="/default-footer-logo.png" alt="Logo do rodapé" />
  ```
* **Correções Necessárias**:

  1. Substituir `<input type="text" />` por `<input type="file" />` e remover campo de URL.
  2. No listener de confirmação, se `input.files.length > 0`, criar `FormData` e realizar `POST /api/upload`.
  3. No retorno da API, obter `url` e atualizar `src` dos elementos `<img>`:

     ```js
     const file = document.getElementById('site-logo').files[0];
     const formData = new FormData();
     formData.append('file', file);
     const res = await fetch('/api/upload', { method: 'POST', body: formData });
     const { url } = await res.json();
     document.getElementById('header-logo-img').src = url;
     ```
  4. Repetir fluxo para `footer-logo`.

### 2.5 e 2.6 Cores Primária e Secundária

* **Markup**:

  ```html
  <label for="primary-color">Cor Primária</label>
  <input type="color" id="primary-color" name="primaryColor" />
  <label for="secondary-color">Cor Secundária</label>
  <input type="color" id="secondary-color" name="secondaryColor" />
  ```
* **Comportamento Esperado**:

  * Ao confirmar, ler `value` de cada input.
  * Executar:

    ```js
    document.documentElement.style.setProperty('--primary-color', primaryColorValue);
    document.documentElement.style.setProperty('--secondary-color', secondaryColorValue);
    ```
  * Incluir `primaryColor` e `secondaryColor` no JSON de update.

### 2.7 E-mail de Contato

* **Markup**:

  ```html
  <label for="contact-email">E-mail de Contato</label>
  <input type="email" id="contact-email" name="contactEmail" />
  <a id="contact-email-link" href="mailto:contato@exemplo.com">contato@exemplo.com</a>
  ```
* **Lógica**:

  ```js
  const email = document.getElementById('contact-email').value;
  const linkEl = document.getElementById('contact-email-link');
  linkEl.href = `mailto:${email}`;
  linkEl.innerText = email;
  ```

### 2.8 e 2.9 Links de Redes Sociais

* **Markup**:

  ```html
  <label for="social-facebook">Link Facebook</label>
  <input type="text" id="social-facebook" name="socialFacebook" />
  <a id="facebook-link" href="#">Facebook</a>

  <label for="social-instagram">Link Instagram</label>
  <input type="text" id="social-instagram" name="socialInstagram" />
  <a id="instagram-link" href="#">Instagram</a>
  ```
* **Aplicação**:

  ```js
  document.getElementById('facebook-link').href = facebookUrl;
  document.getElementById('instagram-link').href = instagramUrl;
  ```

### 2.10 Modo de Manutenção

* **Markup**:

  ```html
  <label for="maintenance-mode">Modo de Manutenção</label>
  <input type="checkbox" id="maintenance-mode" name="maintenanceMode" />
  <div id="maintenance-banner" style="display:none;">Site em manutenção</div>
  ```
* **Implementação**:

  ```js
  const maintenance = document.getElementById('maintenance-mode').checked;
  document.getElementById('maintenance-banner').style.display = maintenance ? 'block' : 'none';
  if (maintenance) {
    // opcional: redirecionar ou bloquear navegação
  }
  ```

---

## 3. Buffer de Alterações e Botão Confirmar

Para evitar atualizações imediatas, as alterações de cada campo devem ser armazenadas em um objeto JavaScript temporário (*staging area*) até o clique no botão de confirmação.

```js
const staging = {};
// listeners individuais:
document.getElementById('site-title').addEventListener('input', e => {
  staging.siteName = e.target.value;
});
// repetir para cada campo...

// confirmação final:
document.getElementById('confirm-update-btn').addEventListener('click', async () => {
  // aplicar staging ao DOM
  if (staging.siteName) document.getElementById('site-logo-title').innerText = staging.siteName;
  // similar para demais campos...
  // enviar JSON com staging completo:
  await fetch('/api/settings', {
    method: 'PUT',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify(staging)
  });
});
```

Dessa forma, nenhuma alteração visual ocorre antes da confirmação, e todo o payload de atualização é enviado em um único request.

---

## 4. Feedback Visual e Acessibilidade

* Adicionar indicador de carregamento no botão:

  ```html
  <button id="confirm-update-btn" disabled aria-busy="false">Confirmar</button>
  ```
* No JavaScript, antes do fetch:

  ```js
  btn.disabled = true;
  btn.setAttribute('aria-busy', 'true');
  btn.innerText = 'Atualizando...';
  ```
* Em `finally`, restaurar estados:

  ```js
  btn.disabled = false;
  btn.setAttribute('aria-busy', 'false');
  btn.innerText = 'Confirmar';
  ```
* Mensagens de sucesso e erro:

  ```html
  <div id="settings-feedback" role="alert" aria-live="assertive"></div>
  ```

  ```js
  document.getElementById('settings-feedback').innerText = 'Configurações salvas com sucesso!';
  ```

---

## 5. Exemplos de Testes

Sugerimos testes usando Jest e React Testing Library (caso use React) ou Mocha + Chai:

* Verificar que, ao alterar staging.siteName e clicar em confirm, `#site-logo-title` recebe novo valor.
* Simular upload de arquivo no input `#site-logo` e garantir chamada para `/api/upload` e atualização de `src`.
* Testar aplicação de variáveis CSS após confirmação.
* Validar exibição/ocultação de `#maintenance-banner` com checkbox.

---

## 6. Checklist Final para QA

* [ ] Todos os inputs possuem `id` e `name` corretos.
* [ ] Alterações só aplicam após clique em `#confirm-update-btn`.
* [ ] Upload de imagem grava no servidor e atualiza `<img>`.
* [ ] Variáveis CSS `--primary-color` e `--secondary-color` atualizadas dinamicamente.
* [ ] Links e e-mails alterados atualizam `href` e texto.
* [ ] Modo de manutenção exibe/oculta banner.
* [ ] Botão exibe loading e desabilita durante request.
* [ ] Mensagens de sucesso/erro visíveis e acessíveis.
* [ ] Testes automatizados cobrindo cada fluxo.

---

Com este modelo, a equipe terá todas as informações, exemplos e etapas detalhadas para implementar as correções na aba **Config. Site** de forma clara, consistente e livre de ambiguidades. Caso haja dúvidas ou necessidade de ajustes adicionais, estou à disposição para esclarecimentos.
