cat > setup-multi-sites.sh << 'SCRIPT_EOF'
#!/bin/bash
echo "🚀 Configurando VPS para Multi-Sites..."
# Verificar se está rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "❌ Execute como root: sudo bash $0"
    exit 1
fi
# 1. Criar estrutura base
echo "📁 Criando estrutura de diretórios..."
mkdir -p /var/www/shared/{ssl,scripts,templates}
mkdir -p /var/www/monitoring
mkdir -p /var/www/backups
# 2. Script para criar novos sites
echo "🔧 Criando script create-site.sh..."
cat > /var/www/shared/scripts/create-site.sh << 'EOF'
#!/bin/bash
SITE_NAME=$1
DOMAIN=$2
PORT=$3
if [ "$#" -ne 3 ]; then
    echo "Uso: $0 <nome_site> <dominio> <porta>"
    echo "Exemplo: $0 rotacaicara rotacaicara.com.br 3002"
    exit 1
fi
# Verificar se porta já está em uso
if netstat -tlnp | grep -q ":$PORT "; then
    echo "❌ Porta $PORT já está em uso!"
    echo "Use: /var/www/shared/scripts/check-ports.sh"
    exit 1
fi
# Criar estrutura do site
mkdir -p /var/www/$DOMAIN/{projeto,logs,backups}
# Template Nginx
cat > /etc/nginx/sites-available/$SITE_NAME << NGINX_EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    # Logs específicos do site
    access_log /var/www/$DOMAIN/logs/access.log;
    error_log /var/www/$DOMAIN/logs/error.log;
    # Limite de upload
    client_max_body_size 10M;
    location / {
        proxy_pass http://localhost:$PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Cache para assets estáticos
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        proxy_pass http://localhost:$PORT;
        proxy_cache_valid 200 1d;
        add_header Cache-Control "public, immutable";
    }
}
NGINX_EOF
# Criar template PM2
cat > /var/www/$DOMAIN/ecosystem.config.json << PM2_EOF
{
  "apps": [{
    "name": "$SITE_NAME",
    "script": "node",
    "args": "dist/index.js",
    "cwd": "/var/www/$DOMAIN/projeto",
    "env": {
      "NODE_ENV": "production",
      "PORT": "$PORT"
    },
    "log_file": "/var/www/$DOMAIN/logs/app.log",
    "error_file": "/var/www/$DOMAIN/logs/error.log",
    "out_file": "/var/www/$DOMAIN/logs/out.log",
    "max_memory_restart": "512M",
    "instances": 1,
    "exec_mode": "fork",
    "watch": false,
    "ignore_watch": ["node_modules", "logs", "uploads"],
    "restart_delay": 1000
  }]
}
PM2_EOF
echo "✅ Site $SITE_NAME criado:"
echo "  📂 Diretório: /var/www/$DOMAIN"
echo "  🌐 Nginx: /etc/nginx/sites-available/$SITE_NAME"
echo "  🔧 PM2: /var/www/$DOMAIN/ecosystem.config.json"
echo "  🔌 Porta: $PORT"
EOF
chmod +x /var/www/shared/scripts/create-site.sh
# 3. Script de monitoramento
echo "📊 Criando script de monitoramento..."
cat > /var/www/shared/scripts/monitor-sites.sh << 'EOF'
#!/bin/bash
echo "=== STATUS DOS SITES ==="
echo "Data: $(date)"
echo ""
# PM2 Status
echo "📊 PM2:"
pm2 status 2>/dev/null || echo "PM2 não iniciado"
echo ""
echo "🌐 Nginx:"
systemctl status nginx --no-pager -l
echo ""
echo "🔍 Portas em Uso:"
netstat -tlnp 2>/dev/null | grep ":50[0-2][0-9]" | awk '{print $4}' | sort
EOF
chmod +x /var/www/shared/scripts/monitor-sites.sh
# 4. Script para verificar portas
echo "🔌 Criando script check-ports.sh..."
cat > /var/www/shared/scripts/check-ports.sh << 'EOF'
#!/bin/bash
echo "🔍 Portas em uso (3002-5020):"
for port in {3002..5020}; do
    if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
        app=$(netstat -tlnp 2>/dev/null | grep ":$port " | awk '{print $7}' | cut -d'/' -f2 | head -1)
        echo "  ❌ $port - Em uso ($app)"
    fi
done
echo ""
echo "✅ Próximas portas disponíveis:"
count=0
for port in {3002..5020}; do
    if ! netstat -tlnp 2>/dev/null | grep -q ":$port "; then
        echo "  🔌 $port - Disponível"
        ((count++))
        if [ $count -eq 5 ]; then break; fi
    fi
done
EOF
chmod +x /var/www/shared/scripts/check-ports.sh
# 5. Configurar permissões
echo "🔐 Configurando permissões..."
chown -R root:root /var/www/shared
chmod -R 755 /var/www/shared
chmod +x /var/www/shared/scripts/*.sh
# 6. Criar aliases
echo "⚙️ Criando aliases..."
cat >> /root/.bashrc << 'EOF'
# Multi-Sites Management
alias sites-status='/var/www/shared/scripts/monitor-sites.sh'
alias sites-ports='/var/www/shared/scripts/check-ports.sh'
alias sites-create='/var/www/shared/scripts/create-site.sh'
EOF
echo ""
echo "🎉 CONFIGURAÇÃO CONCLUÍDA!"
echo ""
echo "Comandos disponíveis:"
echo "  sites-create    - Criar novo site"
echo "  sites-status    - Ver status"
echo "  sites-ports     - Ver portas"
echo ""
echo "Para criar primeiro site:"
echo "  sites-create rotacaicara rotacaicara.com.br 3002"
SCRIPT_EOF
# Executar o script
chmod +x setup-multi-sites.sh
./setup-multi-sites.sh