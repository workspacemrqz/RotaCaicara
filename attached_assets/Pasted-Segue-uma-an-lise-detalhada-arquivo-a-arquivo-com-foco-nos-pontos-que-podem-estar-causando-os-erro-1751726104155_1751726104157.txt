Segue uma análise detalhada, arquivo a arquivo, com foco nos pontos que podem estar causando os erros de produção, especialmente no endpoint de “site settings”:

---

## 1. Dockerfile e processo de build

```dockerfile
# Etapa 7: npm run build:production
RUN npm run build:production

# …que faz:
#  > npm install --production=false   <-- instala DEP dev
#  > npx vite build                   <-- build do front
#  > npx esbuild server/index.ts …    <-- bundle do back

# Etapa 8: npm ci --omit=dev          <-- remove DEP dev
```

* **Char 27–31** (`npm install --production=false`): essa flag instala as dependências de desenvolvimento no container de build. Embora funcione, o ideal seria usar `npm ci --omit=dev` já na primeira fase, evitando instalar e depois remover.
* **Possível melhoria**: trocar `npm run build:production` por um script que só instale `devDependencies` se `NODE_ENV=development`, ou usar multistage build para separar dev/deps.

---

## 2. `server/index.ts` (condicional de Vite)

Linhas relevantes (77–89):

```ts
78│   const isProduction = process.env.NODE_ENV === "production";
80│   if (!isProduction) {
81│     try {
82│       const { configureVite } = await import("./vite");
83│       await configureVite(app);
84│     } catch (error) { … }
85│   } else {
88│     serveStatic(app);
89│   }
```

* A checagem de ambiente está correta: **não** importa o Vite em produção.
* **Verificação**: confirme no container em produção que `NODE_ENV` realmente esteja definido como `"production"`. Se faltar, o `!isProduction` cairá no bloco de desenvolvimento e tentará importar o Vite, gerando erro de módulo não encontrado.
* **Sugestão**: adicionar no `Dockerfile`

  ```dockerfile
  ENV NODE_ENV=production
  ```

  antes do `RUN npm run build:production`.

---

## 3. `server/vite.ts`

* A exportação de `serveStatic(app)` está ok, serve a pasta `dist/public`.
* **Char-level**: nada de sintaxe aparente.

---

## 4. **Principal ponto de falha**: `server/storage.ts`

### Problema de sintaxe e lógica em `getSiteSettings()`

No método `async getSiteSettings()` (linhas \~987–1020 e 1026–1040) há dois blocos de `try { … }` aninhados **sem** fechamento correto de chaves, além de lógica duplicada que não pertence a esse método. A estrutura atual é aproximadamente:

```ts
987: async getSiteSettings(): Promise<SiteSetting> {
988:   console.log('⚙️ DatabaseStorage: Fetching site settings...');
989:   try {
990:     const result = await db.select().from(siteSettings).limit(1);
991:     if (result[0]) {
992:       console.log('✅ …');
993:       return result[0];
994:     }
996:     console.log('⚠️ … criando default');
997:     const defaultSettings = { … };
1016:      return newSetting;
1017:   } catch (error) {
1019:     console.error('❌ …', error);
1020:     throw error;
1020:   }
    // **AQUI** faltaria um `}` para encerrar o método
1026:   try {   // <-- segundo try que não pertence a getSiteSettings
1027:     // Busca a configuração existente
1028:     const [existing] = await db.select()…
1039:     } else {
1040:       // Insere novo …
```

**Erros identificados**:

1. **Chave de fechamento ausente** após o primeiro `catch`.
2. **Duplicação de bloco** de lógica (um segundo `try` para atualizar/inserir) dentro do mesmo método, quando esse código deveria ser parte de um método **separado** (`updateSiteSettings`).
3. Isso causa **erro de compilação** (método não fechado) ou, no melhor dos casos, comportamento imprevisível que lança um 500.

---

## 5. Recomendações de correção

1. **Fechar o método** `getSiteSettings` logo após o primeiro `catch`:

   ```diff
   1017:     throw error;
   1018:   } // fecha o catch
   ```

* 1019: } // fecha o método getSiteSettings

  ```
  ```

2. **Remover ou mover** o segundo bloco `try { … }` (linhas \~1026–1040) para um método **separado**, por exemplo:

   ```ts
   async updateSiteSettings(settingsUpdate: Partial<SiteSetting>): Promise<SiteSetting> { 
     try {
       const [existing] = await db.select().from(siteSettings).limit(1);
       if (existing) {
         const [updated] = await db…
         return updated;
       } else {
         const [created] = await db…
         return created;
       }
     } catch (error) {
       console.error('❌ Error updating site settings:', error);
       throw error;
     }
   }
   ```

3. Ajustar a **interface** `IStorage` em `server/index.ts` para incluir `updateSiteSettings(): Promise<SiteSetting>` (se já não existir).

4. **Garantir** que `NODE_ENV=production` esteja definido no ambiente de execução (Dockerfile ou EasyPanel).

5. (Opcional) Consolidar o script de build para **não** instalar e depois remover dev-dependencies, simplificando etapas no Dockerfile.

---

### Conclusão

* **Causa principal do 500**: sintaxe incorreta em `storage.ts` (método não fechado) e lógica duplicada.
* **Correção rápida**: fechar o método `getSiteSettings`, mover a lógica de atualização para um novo método `updateSiteSettings`, e ajustar a interface.
* **Verificação adicional**: confirmar `NODE_ENV=production` e simplificar o Dockerfile.

Após aplicar essas mudanças, refaça o deploy e monitore se o endpoint de configurações (`/site-settings`) passa a retornar corretamente o objeto em JSON, sem falhas 500. Qualquer outra inconsistência nos logs, é só mandar!
