Atue como uma IA especialista em desenvolvimento React e Next.js. Seu objetivo é auxiliar na correção do componente de edição e publicação de negócios do projeto **EcoTrackSolution**, hospedado no Replit. Siga as instruções abaixo:

1. Identifique o arquivo `EditBusinessModal.jsx` em `src/components/Business` e verifique o import de `useState`, `useEffect`, `api` (cliente Axios ou fetch configurado).
2. Assegure que o componente inicializa o estado do formulário com todos os campos obrigatórios do backend: `businessName` (string), `categoryId` (number), `phone` (string), `whatsapp` (string), `address` (string) e `description` (string).
3. Consulte o esquema de validação do backend (arquivo de rotas ou schema, possivelmente em `src/routes/business.js` ou `src/schema/businessSchema.js`) para confirmar nomes e tipos dos campos.
4. No JSX, garanta que cada campo de entrada (`<input>`, `<select>`, `<textarea>`) possua `name` idêntico ao do schema, por exemplo:

   ```jsx
   <input name="businessName" value={form.businessName} onChange={handleChange} />
   ```
5. Implemente a função `handleChange`:

   ```js
   function handleChange(e) {
     const { name, value } = e.target;
     setForm(prev => ({ ...prev, [name]: name === 'categoryId' ? parseInt(value, 10) : value }));
   }
   ```
6. Ajuste `handleSubmit` para:

   ```js
   async function handleSubmit(e) {
     e.preventDefault();
     try {
       const response = await api.patch(`/businesses/${id}`, form);
       if (response.status === 200) {
         toast.success('Cadastro atualizado com sucesso');
         closeModal();
         refreshList();
       }
     } catch (err) {
       toast.error(err.response?.data?.message || err.message);
     }
   }
   ```
7. No botão de **PUBLICAR**, a função deve usar `await api.post('/businesses', form)` e seguir tratamento idêntico ao de edição.
8. Instrua a IA a verificar se o cliente Axios está enviando `Content-Type: 'application/json'` e se não há interceptadores removendo o corpo das requisições.
9. Solicite à IA que adicione testes unitários (Jest + React Testing Library) para validar que o payload enviado corresponde ao schema do backend.
10. Peça para a IA gerar um commit Git com título e descrição concisa, detalhando as alterações de código.

Forneça exemplos de trechos de código completos antes e depois das modificações. Explique de forma clara cada alteração, linha a linha, para que um desenvolvedor siga sem ambiguidades. Termine gerando instruções para testar manualmente no Replit, usando o console de rede e logs de servidor para validar o funcionamento correto.
